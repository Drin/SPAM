<div id="page">
   <div id="content">
      <div id="input_header">
         <h3> Cluster Parameters </h3>
      </div>
      <form id="cluster_params">
         <input type="text" id="output_file" name="Output File" placeholder="Output File Name"/>

         <br/>

         <input type="text" id="ontology" name="ontology" placeholder="Ontology"/>
         <input type="button" id="ontology_specify" value="Specify Ontology"/>
         <input type="button" id="ontology_confirm" value="Confirm Ontology"/>

         <div id="ontology_area">
            <div id="left_ontology_area">
               <select id="schema_tables" selectedIndex="-1"></select>
               <div id="schema_columns"></div>
            </div>

            <div id="right_ontology_area">
               <select id="ontology_schema" size="5"></select>
               <input id="remove_button" type="button" value="remove partition"/>
            </div>
         </div>

         <br/>

         <select id="data_table" name="data_table" >
            <option value="Isolates">Isolates</option>
            <option value="Pyroprints">Pyroprints</option>
            <option value="Experiments">Experiments</option>
         </select>

         <input type="text" name="data_set_ids" placeholder="Data Set IDs"/>
         <input type="button" id="browse_data" value="Choose Records"/>
         
         <br/>

         <select id="record_select" multiple>
         </select>

         <br/>

         <div class="region_input">

            <div class="region_spec">
               <label class="pad-right">ITS Region:</label>
               <select name="first_region">
                  <option value="16S-23S">16S-23S</option>
                  <option value="23S-5S">23S-5S</option>
               </select>

               <br />

               <label>Disp Length:</label>
               <input type="number" id="first_disp_length" name="Dispensation Length" placeholder="Dispensation Length" value="93"/>
            </div>

            <div class="region_thresholds">
               <label>Upper Threshold:</label>
               <input type="number" id="first_alpha_thresh" name="Upper Threshold" placeholder="Upper Threshold" value="99.5"/>

               <br />

               <label>Lower Threshold:</label>
               <input type="number" id="first_beta_thresh" name="Lower Threshold" placeholder="Lower Threshold" value="99.0"/>
            </div>

         </div>

         <div class="region_input">

            <div class="region_spec">
               <label class="pad-right">ITS Region:</label>
               <select name="second_region">
                  <option value="23S-5S">23S-5S</option>
                  <option value="16S-23S">16S-23S</option>
               </select>

               <br />

               <label>Disp Length:</label>
               <input type="number" id="second_disp_length" name="Dispensation Length" placeholder="Dispensation Length" value="93"/>
            </div>

            <div class="region_thresholds">
               <label>Upper Threshold:</label>
               <input type="number" id="second_alpha_thresh" name="Upper Threshold" placeholder="Upper Threshold" value="99.5"/>

               <br/>                                                                                                         

               <label>Lower Threshold:</label>
               <input type="number" id="second_beta_thresh" name="Lower Threshold" placeholder="Lower Threshold" value="99.0"/>
            </div>

         </div>

         <div class="form_controls">
            <input type="submit" value="Cluster"/>
            <input type="button" id="cancel_button" value="Clear" />
         </div>
      </form>
   </div>
</div>

<script type="application/javascript">
   function addEventListener(element, event, handler) {
      if (element.addEventListener) {
         element.addEventListener(event, handler, false);
      }
      else if (element.attachEvent) {
         element.attachEvent('on' + event, handler);
      }
   }

   function removeEventListener(element, event, handler) {
      if (element.removeEventListener) {
         element.removeEventListener(event, handler, false);
      }
      else if (element.detachEvent) {
         element.detachEvent('on' + event, handler);
      }
   }

   function clear_form() {
      for (input in text_inputs) {
         text_inputs[input].value = text_inputs[input].name;
      }
   }

   function collapseContent() {
      var collapse_incr = 5;
      var content = document.getElementById('ontology_area');

      content.style.height -= content.style.height > collapse_incr ?
                              collapse_incr : content.style.height;

      setTimeout(collapseContent, 100);
   }

   function set_column_select() {
      var table_select_elements = document.getElementsByClassName('table_select');
      var table_select = document.getElementById('schema_tables');
      var selected_table = '';

      if (table_select.options[table_select.selectedIndex]) {
         selected_table = table_select.options[table_select.selectedIndex].value;
      }

      for (elem_ndx in table_select_elements) {
         if (table_select_elements[elem_ndx].id === selected_table + '_table_select') {
            table_select_elements[elem_ndx].className = 'table_select';
            table_select_elements[elem_ndx].selectedIndex = -1;
         }
         else {
            table_select_elements[elem_ndx].className = 'table_select hidden';
         }
      }
   }

   function choose_column() {
      var ontology_columns = document.getElementById('ontology_schema');

      ontology_columns.add(this.options[this.selectedIndex]);
      this.selectedIndex = -1;
   }

   function construct_ontology() {
      var ontology_area = document.getElementById('ontology_area');
      var schema_tables = document.getElementById('schema_tables');
      var schema_columns = document.getElementById('schema_columns');

      if (ontology_area.style.display === 'none' ||
          ontology_area.style.display === '') {
         ontology_area.style.display = 'block';
      }

      else if (ontology_area.style.display === 'block') {
         //collapseContent(ontology_area);
         ontology_area.style.display = 'none';
      }
   }

   function serialize_ontology() {
      var ontology_text = document.getElementById('ontology');
      var ontology_schema = document.getElementById('ontology_schema');
      var ontology = [];

      for (opt_ndx in ontology_schema.options) {
         if (ontology_schema.options[opt_ndx].value) {
            console.log('pushing ' + ontology_schema.options[opt_ndx].value);
            ontology.push(ontology_schema.options[opt_ndx].value);
         }
      }

      ontology_text.value = ontology.join(',');

      console.log(ontology_text.value);
   }

   function remove_column() {
      var select_elements = document.getElementsByClassName('table_select');
      var ontology_schema = document.getElementById('ontology_schema');
      var selected_partition;

      for (elem_ndx in select_elements) {
         if (select_elements[elem_ndx] &&
             select_elements[elem_ndx].className === 'table_select') {
            selected_partition = ontology_schema.options[ontology_schema.selectedIndex];

            console.log(selected_partition);

            if (selected_partition) {
               select_elements[elem_ndx].add(selected_partition);
               select_elements[elem_ndx].selectedIndex = -1;
               ontology_schema.selectedIndex = -1;
            }
         }
      }
   }

   function browse_data() {
      var data_set = document.getElementById('data_table');
      var selected_data_set = data_set.options[data_set.selectedIndex].value;
      
      //$.getJSON('/browse_data', {data: selected_data_set}, function (data_records) {
      $.getJSON('/browse_data/' + selected_data_set, function (data_records) {
         if (data_records) { 
            var data_table = document.getElementById('record_select');

            for (data_ndx in data_records) {
               
            }
         }
      });
   }

   addEventListener(document.getElementById('schema_tables'), 'change', set_column_select);
   addEventListener(document.getElementById('cancel_button'), 'click', clear_form);
   addEventListener(document.getElementById('ontology_specify'), 'click', construct_ontology);
   addEventListener(document.getElementById('ontology_confirm'), 'click', serialize_ontology);
   addEventListener(document.getElementById('remove_button'), 'click', remove_column);
   addEventListener(document.getElementById('browse_data'), 'click', browse_data);

   $.getJSON('/construct_ontology', function (cplop_schema) {
      if (cplop_schema) {

         for (table in cplop_schema) {
            var tbl_option = document.createElement("option");
            tbl_option.text = table;

            schema_tables.add(tbl_option);

            var column_select = document.createElement('select');
            column_select.id = table + '_table_select';
            column_select.className = 'table_select';
            addEventListener(column_select, 'change', choose_column);

            for (table_column in cplop_schema[table]) {
               var col_option = document.createElement("option");
               col_option.text = cplop_schema[table][table_column];

               column_select.add(col_option);
            }

            schema_columns.appendChild(column_select);
         }

         schema_tables.selectedIndex = -1;
         set_column_select();
      }
   });
</script>
